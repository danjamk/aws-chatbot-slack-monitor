# AWS Alert Intelligence System Configuration
# This file contains non-sensitive configuration and is safe to commit to git
# Sensitive values (AWS credentials, Slack webhooks, etc.) should be in .env file

project:
  name: aws-alert-intelligence
  environment: prod  # Options: personal-dev, startup-prod, prod
  version: 2.0.0  # Phase 1: AI-powered alert analysis

# Budget configuration
budgets:
  # Daily budget limit in USD
  daily_limit: 10.00

  # Monthly budget limit in USD
  monthly_limit: 300.00

  # Warning threshold percentage (triggers heartbeat channel alert)
  monthly_threshold_warning: 80

  # Critical threshold percentage (triggers critical channel alert)
  monthly_threshold_critical: 100

  # Budget currency
  currency: USD

  # Budget time unit (DAILY, MONTHLY, QUARTERLY, ANNUALLY)
  time_unit_monthly: MONTHLY
  time_unit_daily: DAILY

# AWS configuration
aws:
  # Primary AWS region for deployment
  # Note: CloudWatch billing metrics only available in us-east-1
  region: us-east-1

  # Your AWS account ID (12-digit number)
  # Get it with: aws sts get-caller-identity --query Account --output text
  account_id: "123456789012"  # CHANGE THIS

  # Stack naming convention
  stack_prefix: ChatbotMonitor

# CloudWatch Dashboard configuration
dashboard:
  # Enable/disable dashboard creation
  enabled: true

  # Dashboard name
  name: CostMonitoring

  # Number of top services to display by cost
  top_services_count: 10

  # Dashboard auto-refresh interval (seconds)
  # Set to 0 to disable auto-refresh
  auto_refresh_seconds: 300  # 5 minutes

  # Period for metrics (seconds)
  # 3600 = 1 hour, 86400 = 1 day
  metric_period_seconds: 86400

# Notification configuration
notifications:
  # Enable email notifications (in addition to Slack)
  email_enabled: true

  # Enable Slack notifications
  slack_enabled: true

  # Slack configuration (workspace ID, channel IDs, webhooks) is in .env file
  # See .env.example for required variables

  # SNS topic naming
  critical_topic_name: critical-alerts
  heartbeat_topic_name: heartbeat-alerts

  # Notification routing
  # These define which notifications go to which channel
  routing:
    daily_budget_exceeded: heartbeat  # Options: critical, heartbeat
    monthly_warning: heartbeat        # 80% threshold
    monthly_exceeded: critical        # 100% threshold

# AI Alert Analysis Configuration
# Controls which alerts receive AI-powered analysis (costs LLM tokens)
ai_analysis:
  # Enable/disable AI analysis globally
  enabled: true

  # LLM provider and model settings are in .env file
  # (LLM_PROVIDER, LLM_MODEL_ID, LLM_TEMPERATURE, LLM_MAX_TOKENS)

  # Alert routing rules - which alerts get AI analysis
  rules:
    # Budget alerts
    analyze_budget_warning: true         # ≥80% monthly budget
    analyze_budget_critical: true        # ≥100% monthly budget
    analyze_daily_budget_exceeded: true  # Daily budget exceeded
    analyze_daily_budget_report: false   # Skip AI for daily cost summaries (raw data is fine)

    # CloudWatch alarms
    analyze_cloudwatch_alarm_error: true    # ERROR state alarms
    analyze_cloudwatch_alarm_warning: true  # WARN state alarms
    analyze_cloudwatch_alarm_info: false    # INFO state alarms

    # EMR events (for user's R&D use case)
    analyze_emr_cluster_failure: true       # EMR cluster terminated with errors
    analyze_emr_step_failure: true          # EMR step failures
    analyze_emr_bootstrap_failure: true     # EMR bootstrap action failures

    # Custom events
    analyze_custom_error_events: true       # Custom error events from EventBridge
    analyze_custom_warning_events: false    # Custom warning events

  # Blacklist - message patterns to NEVER analyze (even if rules say yes)
  # Use for known false positives or low-priority alerts
  blacklist:
    - "HealthCheckSuccess"
    - "MaintenanceWindowStarted"
    # - "TestAlarm-DeleteMe"  # Uncomment to ignore test alarms

  # Whitelist - message patterns to ALWAYS analyze (overrides blacklist)
  # Use for critical patterns that must always be analyzed
  whitelist:
    - "ProductionFailure"
    - "DataLoss"
    - "SecurityBreach"

# EMR Monitoring Configuration
# Specific to user's R&D use case: EMR jobs failing without proper error reporting
emr:
  # Enable EMR-specific monitoring
  enabled: true

  # EMR cluster patterns to monitor (regex)
  # Empty list = monitor all clusters
  monitored_clusters:
    - ".*"  # Monitor all clusters

  # EMR notification routing
  routing:
    cluster_failure: critical    # Cluster terminated with errors → critical channel
    step_failure: critical       # Step failure → critical channel
    bootstrap_failure: critical  # Bootstrap failure → critical channel
    cluster_terminated: heartbeat  # Normal termination → heartbeat
    cluster_started: heartbeat   # Cluster started → heartbeat

  # EMR tools configuration
  tools:
    # Maximum number of failed steps to retrieve
    max_failed_steps: 10

    # Maximum log lines to fetch per step
    max_log_lines: 100

    # Include Spark application logs in analysis
    include_spark_logs: true

# Daily cost report configuration
daily_report:
  # Enable/disable daily cost reports
  enabled: true

  # Hour to send daily report (UTC, 0-23)
  # 8 = 8 AM UTC (3 AM EST, 12 AM PST)
  schedule_hour_utc: 8

# Chatbot IAM configuration
chatbot:
  # Use read-only permissions for Slack commands
  read_only_access: true

  # Logging level (ERROR, INFO, NONE)
  logging_level: INFO

  # User role required (enforce that users assume a role)
  user_role_required: false

# Tags applied to all resources
tags:
  Project: AWS Chatbot Slack Monitor
  ManagedBy: CDK
  Environment: prod
  CostCenter: Engineering
  Owner: DevOps Team
